静态库（libxxx.a）：
	ar rcs libxxx.a 材料.o
		生成.o（目标）文件：gcc -c xxx.c -o xx.o
	
	链接：gcc xxx.c -I/xxxx.h /..../libxxx.a -o xxxx	//需要指定库的头文件所在位置
		
	制作：
		生成.a文件后，再生成.h文件
			#ifndef _HEAD_H_		//已头文件命名HEAD
			#define _HEAD_H_
			.....
			#endif
		
		规范：
			inc文件夹：存放.h头文件（库文件）
			lib文件夹：存放.a文件
			
			gcc -c xxx.c /../lib/libXXX.a -o target -I /../inc/XXX.h
			
动态库：
	1. 将.c生成.o文件 （生成与位置无关的代码 -fPIC）
		gcc -c xxx.c -o xxx.o -fPIC
		
	2. 使用gcc -share制作动态库
		gcc -shared -o libxxx.so xxx.o xxx.o xxx.o
	
	3. 编译可执行程序时指定动态库 -l / -L (指定库名/指定库路径)
		gcc xxx.c -o xxx.out -lxxxx -L./lib		//暂不可执行文件
			（-l 时，文件名省略'lib'）
			
			
	//链接器：工作于链接阶段，-l -L
	//动态链接器：工作于程序运行阶段，需要提供动态库目录位置
	
	通过环境变量改变：可执行含动态库的.out文件
		export LD_LIBRARY_PATH=动态库的路径	（进程有效，退出终端后消除）
		配置~/.bashrc 永久生效	（source ~/.bashrc立即生效）
		
	ldd xx.out 	//查看执行文件以来的动态库
